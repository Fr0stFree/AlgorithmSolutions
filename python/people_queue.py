"""
–í –æ—á–µ—Ä–µ–¥–∏ –≤ –º–∞–≥–∞–∑–∏–Ω —Å—Ç–æ—è—Ç –ª—é–¥–∏. –ß–µ–ª–æ–≤–µ–∫ ùëñ —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä ùëéùëñ. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤ –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç.
–ü—Ä–æ–∏—Å—Ö–æ–¥—è—Ç —Å–æ–±—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç–∏–ø–æ–≤:
    –í –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ ùëá –ø–æ—Å—Ç—É–ø–∏–ª –æ–¥–∏–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–æ–≤–∞—Ä–∞ ùê¥.
    –í –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ ùëá –≤ –∫–æ–Ω–µ—Ü –æ—á–µ—Ä–µ–¥–∏ –≤—Å—Ç–∞–ª —á–µ–ª–æ–≤–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä ùê¥.
–ù—É–∂–Ω–æ –ø—Ä–æ–º–æ–¥–µ–ª–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å–∫–æ–ª—å–∫–æ –æ–Ω –±—É–¥–µ—Ç —Å—Ç–æ—è—Ç—å –≤ –æ—á–µ—Ä–µ–¥–∏.
–ó–∞–º–µ—á–∞–Ω–∏–µ: –∫–∞–∫ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –≤ –æ—á–µ—Ä–µ–¥–∏ –º–æ–∂–µ—Ç –∫—É–ø–∏—Ç—å —Ç–æ, —á—Ç–æ —Ö–æ—á–µ—Ç, –æ–Ω —Å—Ä–∞–∑—É –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–∫—É–ø–∞–µ—Ç –∏ —É—Ö–æ–¥–∏—Ç.
"""
from collections import defaultdict, deque

def solve(events: list[tuple[int, int, int]]):
    inventory: dict[int, int] = defaultdict(lambda: 0)
    queue: deque[tuple[int, int]] = deque()
    result: list[int] = []

    for event in events:
        if event[0] == 1:
            inventory[event[2]] += 1

        else:
            queue.append((event[1], event[2]))

        while queue and queue[0][1] in inventory:
            customer = queue.popleft()
            inventory[customer[1]] -= 1
            result.append(event[1] - customer[0])

            if inventory[customer[1]] <= 0:
                inventory.pop(customer[1])

    result.extend([-1] * len(queue))
    return result


def read_data() -> list[tuple[int, int, int]]:
    size = int(input())
    return [tuple(map(int, input().split(" "))) for _ in range(size)]


if __name__ == '__main__':
    data = read_data()
    solution = solve(data)
    print(" ".join(map(str, solution)))
